{
  "_args": [
    [
      {
        "raw": "validatorjs@^3.13.3",
        "scope": null,
        "escapedName": "validatorjs",
        "name": "validatorjs",
        "rawSpec": "^3.13.3",
        "spec": ">=3.13.3 <4.0.0",
        "type": "range"
      },
      "/Users/ddancziger/react-app/react-amenity-starter"
    ]
  ],
  "_from": "validatorjs@>=3.13.3 <4.0.0",
  "_id": "validatorjs@3.13.5",
  "_inCache": true,
  "_location": "/validatorjs",
  "_nodeVersion": "6.11.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/validatorjs-3.13.5.tgz_1503647251207_0.022439700784161687"
  },
  "_npmUser": {
    "name": "skaterdav85",
    "email": "dtang859@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "validatorjs@^3.13.3",
    "scope": null,
    "escapedName": "validatorjs",
    "name": "validatorjs",
    "rawSpec": "^3.13.3",
    "spec": ">=3.13.3 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/validatorjs/-/validatorjs-3.13.5.tgz",
  "_shasum": "4013c71122ef3ef83ba3cb81b270d8f0217a7658",
  "_shrinkwrap": null,
  "_spec": "validatorjs@^3.13.3",
  "_where": "/Users/ddancziger/react-app/react-amenity-starter",
  "author": {
    "name": "David",
    "email": "david@thejsguy.com"
  },
  "bugs": {
    "url": "https://github.com/skaterdav85/validatorjs/issues?labels=bug&milestone=1&page=1&state=open"
  },
  "contributors": [
    {
      "name": "Gary Green",
      "email": "holegary@gmail.com"
    },
    {
      "name": "Karol Janyst",
      "email": "lapkom@gmail.com"
    },
    {
      "name": "Mike Erickson",
      "email": "codedungeon@gmail.com"
    }
  ],
  "dependencies": {},
  "description": "Validation library inspired by Laravel's Validator",
  "devDependencies": {
    "browserify": "^13.0.1",
    "chai": "~3.5.0",
    "grunt": "1.0.1",
    "grunt-browserify": "^5.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-concat": "~1.0.1",
    "grunt-contrib-jshint": "1.0.0",
    "grunt-contrib-uglify": "1.0.1",
    "grunt-contrib-watch": "~1.0.0",
    "jit-grunt": "^0.10.0",
    "karma": "~1.1.0",
    "karma-browserify": "^5.0.5",
    "karma-chai": "~0.1.0",
    "karma-chrome-launcher": "~1.0.1",
    "karma-coverage": "~1.0.0",
    "karma-growl-notifications-reporter": "0.0.2",
    "karma-mocha": "~1.1.1",
    "karma-phantomjs-launcher": "~1.0.1",
    "mocha": "~2.5.3",
    "mocha-better-spec-reporter": "github:mikeerickson/mocha-better-spec-reporter"
  },
  "directories": {},
  "dist": {
    "shasum": "4013c71122ef3ef83ba3cb81b270d8f0217a7658",
    "tarball": "https://registry.npmjs.org/validatorjs/-/validatorjs-3.13.5.tgz"
  },
  "gitHead": "23802a692fd4a87d48af39d4279b3fdfcf4e3d34",
  "homepage": "https://github.com/skaterdav85/validatorjs#readme",
  "keywords": [
    "validatorjs",
    "validator.js",
    "data validation",
    "validator",
    "validate",
    "validation",
    "data",
    "laravel",
    "laravel-validator-for-js"
  ],
  "license": "MIT",
  "main": "./src/validator.js",
  "maintainers": [
    {
      "name": "codedungeon",
      "email": "codedungeon@gmail.com"
    },
    {
      "name": "mikeerickson",
      "email": "codedungeon@gmail.com"
    },
    {
      "name": "garygreen",
      "email": "holegary@gmail.com"
    },
    {
      "name": "skaterdav85",
      "email": "dtang85@gmail.com"
    }
  ],
  "name": "validatorjs",
  "optionalDependencies": {},
  "readme": "validatorjs\n===========\n\n[![Build Status](https://travis-ci.org/skaterdav85/validatorjs.png?branch=master)](https://travis-ci.org/skaterdav85/validatorjs)\n\nThe validatorjs library makes data validation in JavaScript very easy in both the browser and Node.js. This library was inspired by the [Laravel framework's Validator](http://laravel.com/docs/validation).\n\n## Why use validatorjs?\n\n* Not dependent on any libraries.\n* Works in both the browser and Node.\n* Readable and declarative validation rules.\n* Error messages with multilingual support.\n* AMD/Require.js and CommonJS/Browserify support.\n\n## Installation\n\nGrab validatorjs from Bower, NPM, or the /dist directory on Github:\n\n```\nbower install validatorjs\n```\n\n```\nnpm install validatorjs\n```\n\n### Browser\n\n```html\n<script src=\"validator.js\"></script>\n```\n\n### Node.js / Browserify\n\n```js\nvar Validator = require('validatorjs');\n```\n\n### Basic Usage\n\n```js\nvar validation = new Validator(data, rules [, customErrorMessages]);\n```\n\n__data__ {Object} - The data you want to validate\n\n__rules__ {Object} - Validation rules\n\n__customErrorMessages__ {Object} - Optional custom error messages to return\n\n#### Example 1 - Passing validation\n\n```js\nvar data = {\n\tname: 'John',\n\temail: 'johndoe@gmail.com',\n\tage: 28\n};\n\nvar rules = {\n\tname: 'required',\n\temail: 'required|email',\n\tage: 'min:18'\n};\n\nvar validation = new Validator(data, rules);\n\nvalidation.passes(); // true\nvalidation.fails(); // false\n```\n\nTo apply validation rules to the _data_ object, use the same object key names for the _rules_ object.\n\n#### Example 2 - Failing validation\n\n```js\nvar validation = new Validator({\n\tname: 'D',\n\temail: 'not an email address.com'\n}, {\n\tname: 'size:3',\n\temail: 'required|email'\n});\n\nvalidation.fails(); // true\nvalidation.passes(); // false\n\n// Error messages\nvalidation.errors.first('email'); // 'The email format is invalid.'\nvalidation.errors.get('email'); // returns an array of all email error messages\n```\n\n### Nested rules\n\nNested objects can also be validated. There are two ways to declare validation rules for nested objects. The first way is to declare the validation rules with a corresponding nested object structure that reflects the data. The second way is to declare validation rules with flattened key names. For example, to validate the following data:\n\n```js\nvar data = {\n  name: 'John',\n  bio: {\n    age: 28,\n    education: {\n      primary: 'Elementary School',\n      secondary: 'Secondary School'\n    }\n  }\n};\n```\n\nWe could declare our validation rules as follows:\n\n```js\nvar nested = {\n  name: 'required',\n  bio: {\n    age: 'min:18',\n    education: {\n      primary: 'string',\n      secondary: 'string'\n    }\n  }\n};\n\n// OR\n\nvar flattened = {\n  'name': 'required',\n  'bio.age': 'min:18'\n  'bio.education.primary': 'string',\n  'bio.education.secondary': 'string'\n};\n```\n\n### WildCards rules\n\nWildCards can also be validated.\n\n```js\nvar data = {\n  users:[\n\t{\n\t\tname: 'John',\n\t\tbio: {\n\t\t\tage: 28,\n\t\t\teducation: {\n\t\t\tprimary: 'Elementary School',\n\t\t\tsecondary: 'Secondary School'\n\t\t\t}\n\t\t}\n\t}\n  ]\n};\n```\n\nWe could declare our validation rules as follows:\n\n```js\nvar rules = {\n  'users.*.name': 'required',\n  'users.*.bio.age': 'min:18'\n  'users.*.bio.education.primary': 'string',\n  'users.*.bio.education.secondary': 'string'\n};\n```\n\n### Available Rules\n\nValidation rules do not have an implicit 'required'. If a field is _undefined_ or an empty string, it will pass validation. If you want a validation to fail for undefined or '', use the _required_ rule.\n\n#### accepted\n\nThe field under validation must be yes, on, 1 or true. This is useful for validating \"Terms of Service\" acceptance.\n\n#### after:date\n\nThe field under validation must be after the given date.\n\n#### after_or_equal:date\n\nThe field unter validation must be after or equal to the given field\n\n#### alpha\n\nThe field under validation must be entirely alphabetic characters.\n\n#### alpha_dash\n\nThe field under validation may have alpha-numeric characters, as well as dashes and underscores.\n\n#### alpha_num\n\nThe field under validation must be entirely alpha-numeric characters.\n\n#### array\n\nThe field under validation must be an array.\n\n#### before:date\n\nThe field under validation must be before the given date.\n\n\n#### before_or_equal:date\n\nThe field under validation must be before or equal to the given date.\n\n#### between:min,max\n\nThe field under validation must have a size between the given min and max. Strings, numerics, and files are evaluated in the same fashion as the size rule.\n\n#### boolean\n\nThe field under validation must be a boolean value of the form `true`, `false`, `0`, `1`, `'true'`, `'false'`, `'0'`, `'1'`,\n\n#### confirmed\n\nThe field under validation must have a matching field of foo_confirmation. For example, if the field under validation is password, a matching password_confirmation field must be present in the input.\n\n#### date\n\nThe field under validation must be a valid date format which is acceptable by Javascript's `Date` object.\n\n#### digits:value\n\nThe field under validation must be numeric and must have an exact length of value.\n\n#### different:attribute\n\nThe given field must be different than the field under validation.\n\n#### email\n\nThe field under validation must be formatted as an e-mail address.\n\n#### in:foo,bar,...\n\nThe field under validation must be included in the given list of values. The field can be an array or string.\n\n#### integer\n\nThe field under validation must have an integer value.\n\n#### max:value\n\nValidate that an attribute is no greater than a given size\n\n_Note: Maximum checks are inclusive._\n\n#### min:value\n\nValidate that an attribute is at least a given size.\n\n_Note: Minimum checks are inclusive._\n\n#### not_in:foo,bar,...\n\nThe field under validation must not be included in the given list of values.\n\n#### numeric\n\nValidate that an attribute is numeric. The string representation of a number will pass.\n\n#### required\n\nChecks if the length of the String representation of the value is >\n\n#### required_if:anotherfield,value\n\nThe field under validation must be present and not empty if the anotherfield field is equal to any value.\n\n#### required_unless:anotherfield,value\n\nThe field under validation must be present and not empty unless the anotherfield field is equal to any value.\n\n#### required_with:foo,bar,...\n\nThe field under validation must be present and not empty only if any of the other specified fields are present.\n\n#### required_with_all:foo,bar,...\n\nThe field under validation must be present and not empty only if all of the other specified fields are present.\n\n#### required_without:foo,bar,...\n\nThe field under validation must be present and not empty only when any of the other specified fields are not present.\n\n#### required_without_all:foo,bar,...\n\nThe field under validation must be present and not empty only when all of the other specified fields are not present.\n\n#### same:attribute\n\nThe given field must match the field under validation.\n\n#### size:value\n\nThe field under validation must have a size matching the given value. For string data, value corresponds to the number of characters. For numeric data, value corresponds to a given integer value.\n\n#### string\n\nThe field under validation must be a string.\n\n#### url\n\nValidate that an attribute has a valid URL format\n\n#### regex:pattern\n\nThe field under validation must match the given regular expression.\n\n**Note**: When using the ``regex`` pattern, it may be necessary to specify rules in an array instead of using pipe delimiters, especially if the regular expression contains a pipe character.\nFor each backward slash that you used in your regex pattern, you must escape each one with another backward slash.\n\n#### Example 3 - Regex validation\n\n```js\nvar validation = new Validator({\n\tname: 'Doe',\n\tsalary: '10,000.00',\n\tyearOfBirth: '1980'\n}, {\n\tname: 'required|size:3',\n\tsalary: ['required', 'regex:/^(?!0\\\\.00)\\\\d{1,3}(,\\\\d{3})*(\\\\.\\\\d\\\\d)?$/'],\n\tyearOfBirth: ['required', 'regex:/^(19|20)[\\\\d]{2,2}$/']\n});\n\nvalidation.fails(); // false\nvalidation.passes(); // true\n\n```\n\n#### Example 4 - Type checking validation\n\n```js\nvar validation = new Validator({\n\tage: 30,\n\tname: ''\n}, {\n\tage: ['required', { 'in': [29, 30] }],\n\tname: [{ required_if: ['age', 30] }]\n});\n\nvalidation.fails(); // true\nvalidation.passes(); // false\n\n```\n\n### Registering Custom Validation Rules\n\n```js\nValidator.register(name, callbackFn, errorMessage);\n```\n\n__name__ {String} - The name of the rule.\n\n__callbackFn__ {Function} - Returns a boolean to represent a successful or failed validation.\n\n__errorMessage__ {String} - An optional string where you can specify a custom error message. _:attribute_ inside errorMessage will be replaced with the attribute name.\n\n```js\nValidator.register('telephone', function(value, requirement, attribute) { // requirement parameter defaults to null\n\treturn value.match(/^\\d{3}-\\d{3}-\\d{4}$/);\n}, 'The :attribute phone number is not in the format XXX-XXX-XXXX.');\n```\n\n### Asynchronous validation\n\nRegister an asynchronous rule which accepts a `passes` callback:\n\n```js\nValidator.registerAsync('username_available', function(username, attribute, req, passes) {\n\t// do your database/api checks here etc\n\t// then call the `passes` method where appropriate:\n\tpasses(); // if username is available\n\tpasses(false, 'Username has already been taken.'); // if username is not available\n});\n```\n\nThen call your validator passing a callback to `fails` or `passes` like so:\n\n```js\nvar validator = new Validator({ username: 'test123' }, { username: 'required|min:3|username_available' });\nvalidator.passes(function() {\n\t// Validation passed\n});\n\n// Or call fails()\nvalidator.fails(function() {\n\t// Error message:\n\tvalidator.errors.first('username');\n});\n```\n\nNote: if you attempt to call `passes` or `fails` without a callback and the validator detects there are asynchronous validation rules, an exception will be thrown.\n\n### Error Messages\n\nThis contructor will automatically generate error messages for validation rules that failed.\n\nIf there are errors, the Validator instance will have its __errors__ property object populated with the error messages for all failing attributes. The methods and properties on the __errors__ property object are:\n\n#### .first(attribute)\n\nreturns the first error message for an attribute, false otherwise\n\n#### .get(attribute)\n\nreturns an array of error messages for an attribute, or an empty array if there are no errors\n\n#### .all()\n\nreturns an object containing all error messages for all failing attributes\n\n#### .has(attribute)\n\nreturns true if error messages exist for an attribute, false otherwise\n\n#### .errorCount\n\nthe number of validation errors\n\n```js\nvar validation = new Validator(input, rules);\nvalidation.errors.first('email'); // returns first error message for email attribute\nvalidator.errors.get('email'); // returns an array of error messages for the email attribute\n```\n\n### Custom Error Messages\n\nIf you need a specific error message and you don't want to override the default one, you can pass an override as the third argument to the Validator object, just like with [Laravel](http://laravel.com/docs/validation#custom-error-messages).\n\n```js\nvar input = {\n\tname: ''\n};\n\nvar rules = {\n\tname : 'required'\n};\n\nvar validation = new Validator(input, rules, { required: 'You forgot to give a :attribute' });\nvalidation.errors.first('name'); // returns 'You forgot to give a name'\n```\n\nSome of the validators have string and numeric versions. You can change them too.\n\n```js\nvar input = {\n\tusername: 'myusernameistoolong'\n};\n\nvar rules = {\n\tusername : 'max:16'\n};\n\nvar validation = new Validator(input, rules, {\n\tmax: {\n\t\tstring: 'The :attribute is too long. Max length is :max.'\n\t}\n});\n\nvalidation.errors.first('username'); // returns 'The username is too long. Max length is 16.'\n```\n\nYou can even provide error messages on a per attribute basis! Just set the message's key to 'validator.attribute'\n\n```js\nvar input = { name: '', email: '' };\nvar rules = { name : 'required', email : 'required' };\n\nvar validation = new Validator(input, rules, {\n\t\"required.email\": \"Without an :attribute we can't reach you!\"\n});\n\nvalidation.errors.first('name'); // returns  'The name field is required.'\nvalidation.errors.first('email'); // returns 'Without an email we can\\'t reach you!'\n```\n\n### Custom attribute names\n\nTo display a custom \"friendly\" attribute name in error messages, use `.setAttributeNames()`\n\n```js\nvar validator = new Validator({ name: '' }, { name: 'required' });\nvalidator.setAttributeNames({ name: 'custom_name' });\nif (validator.fails()) {\n\tvalidator.errors.first('name'); // \"The custom_name field is required.\"\n}\n```\n\nAlternatively you can supply global custom attribute names in your lang with the `attributes` property.\n\nYou can also configure a custom attribute formatter:\n\n```js\n// Configure global formatter.\nValidator.setAttributeFormatter(function(attribute) {\n\treturn attribute.replace(/_/g, ' ');\n});\n\n// Or configure formatter for particular instance.\nvar validator = new Validator({ first_name: '' }, { first_name: 'required' });\nvalidator.setAttributeFormatter(function(attribute) {\n\treturn attribute.replace(/_/g, ' ');\n});\nif (validator.fails()) {\n\tconsole.log(validator.errors.first('first_name')); // The first name field is required.\n}\n```\n\nNote: by default all _[] characters will be replaced with spaces.\n\n### Language Support\n\nError messages are in English by default. To include another language in the browser, reference the language file in a script tag and call `Validator.useLang('lang_code')`.\n\n```html\n<script src=\"dist/validator.js\"></script>\n<script src=\"dist/lang/ru.js\"></script>\n<script>\n\tValidator.useLang('es');\n</script>\n```\n\nIn Node, it will automatically pickup on the language source files.\n\n```js\nvar Validator = require('validatorjs');\nValidator.useLang('ru');\n```\n\nIf you don't see support for your language, please add one to `src/lang`!\n\nYou can also add your own custom language by calling `setMessages`:\n\n```js\nValidator.setMessages('lang_code', {\n\trequired: 'The :attribute field is required.',\n\t....\n\t....\n});\n```\n\nGet the raw object of messages for the given language:\n\n```js\nValidator.getMessages('lang_code');\n```\n\nSwitch the default language used by the validator:\n\n```js\nValidator.useLang('lang_code');\n```\n\nGet the default language being used:\n\n```js\nValidator.getDefaultLang(); // returns e.g. 'en'\n```\n\nOverride default messages for language:\n\n```js\nvar messages = Validator.getMessages('en');\nmessages.required = 'Whoops, :attribute field is required.';\nValidator.setMessages('en', messages);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/skaterdav85/validatorjs.git"
  },
  "scripts": {
    "test": "npm run test-node && npm run test-browser",
    "test-browser": "grunt dist && node node_modules/karma/bin/karma start --single-run --browsers PhantomJS",
    "test-node": "node node_modules/mocha/bin/mocha spec",
    "test-node:watch": "node node_modules/mocha/bin/mocha --watch spec"
  },
  "version": "3.13.5"
}
